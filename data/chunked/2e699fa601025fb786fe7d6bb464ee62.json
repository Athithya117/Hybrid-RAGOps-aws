[
  {
    "document_id": "2e699fa601025fb786fe7d6bb464ee62",
    "file_name": "best_chunking_stratergy.html",
    "chunk_id": "2e699fa601025fb786fe7d6bb464ee62_1",
    "chunk_type": "token_window",
    "text": "--- title: Finding the Best Chunking Strategy for Accurate AI Responses | NVIDIA Technical Blog author: Steve Han url: https://developer.nvidia.com/blog/finding-the-best-chunking-strategy-for-accurate-ai-responses/ hostname: nvidia.com description: A chunking strategy is the method of breaking down large documents into smaller, manageable pieces for AI retrieval. Poor chunking leads to irrelevant results, inefficiency, and reduced business value. sitename: NVIDIA Technical Blog date: 2025-06-18 categories: ['Generative AI'] tags: ['featured', 'Retrieval Augmented Generation (RAG)'] --- A chunking strategy is the method of breaking down large documents into smaller, manageable pieces for AI retrieval. Poor chunking leads to irrelevant results, inefficiency, and reduced business value. It determines how effectively relevant information is fetched for accurate AI responses. With so many options available—page-level, section-level, or token-based chunking with various sizes—how do you determine which approach works best for your specific use case? This blog post shares insights from our extensive experimentation across diverse datasets to help you optimize your retrieval-augmented generation (RAG) system’s chunking strategy. ## Introduction Chunking is a critical preprocessing step in RAG pipelines. It involves splitting documents into smaller, manageable pieces that can be efficiently indexed, retrieved, and used as context during response generation. When done poorly, chunking can lead to irrelevant or incomplete responses, frustrating users and undermining trust in the system. It can also increase the computational burden by forcing the retriever or generator to process excessive or unnecessary information. On the other hand, a smart chunking strategy improves retrieval precision and contextual coherence, which directly enhances the quality of the generated answers. For users, this means faster, more accurate, and more helpful interactions. For businesses, it translates to higher user satisfaction, lower churn, and reduced operational costs due to more efficient resource utilization. In short, chunking isn’t just a technical detail—it’s a fundamental design choice that shapes the effectiveness of your entire RAG system. Our research evaluated different chunking strategies across multiple datasets to establish guidelines for selecting the optimal approach based on your specific content and use case. ## Experimental setup ### Chunking strategies tested We tested three primary chunking approaches to understand their impact on retrieval quality and response accuracy: **Token-based chunking**: Documents are split into fixed-size token chunks using content extracted by NVIDIA NeMo Retriever extraction.- Sizes tested: 128,",
    "token_count": 512,
    "embedding": null,
    "file_type": "text/html",
    "source_url": "s3://e2e-rag-system-42/data/raw/htmls/best_chunking_stratergy.html",
    "page_number": null,
    "slide_range": null,
    "row_range": null,
    "token_range": [
      0,
      512
    ],
    "audio_range": null,
    "timestamp": "2025-09-23T15:08:44Z",
    "parser_version": "trafilatura-only-v2",
    "tags": [],
    "layout_tags": [
      "page"
    ],
    "used_ocr": false,
    "heading_path": [],
    "headings": [
      "Finding the Best Chunking Strategy for Accurate AI Responses | NVIDIA Technical Blog"
    ],
    "line_range": null
  }
,
  {
    "document_id": "2e699fa601025fb786fe7d6bb464ee62",
    "file_name": "best_chunking_stratergy.html",
    "chunk_id": "2e699fa601025fb786fe7d6bb464ee62_2",
    "chunk_type": "token_window",
    "text": "tested We tested three primary chunking approaches to understand their impact on retrieval quality and response accuracy: **Token-based chunking**: Documents are split into fixed-size token chunks using content extracted by NVIDIA NeMo Retriever extraction.- Sizes tested: 128, 256, 512, 1,024, and 2,048 tokens - With 15% overlap between chunks (we tested 10%, 15%, and 20% overlap values and found 15% to perform the best on FinanceBench with 1,024 token chunks. While not a full-grid search, this result aligns with the 10–20% overlap commonly seen in industry practices.) **Page-level chunking**: Each page of a document becomes a separate chunk.- Implemented with both NeMo Retriever extraction and nemoretriever-parse to ensure fair comparisons across chunking strategies. **Section-level chunking**: Documents are split based on structural document layout sections using nemoretriever-parse, following the document’s native organization, such as headings, paragraphs, and other formatting elements.- For a fair comparison, we compared page-level and section-level chunking using the same nemoretriever-parse extraction model. ### Datasets We evaluated these strategies across diverse datasets: **DigitalCorpora767**: A public dataset of 767 PDFs from Digital Corpora with 991 human-annotated questions across text, tables, charts, and infographics.**Earnings**: An internal collection of 512 PDFs (earnings reports, consulting presentations) containing over 3,000 instances each of charts, tables, and infographics, accompanied by 600+ human-annotated retrieval questions.**FinanceBench**: A benchmark dataset designed to evaluate the performance of large language models (LLMs) in answering financial questions related to publicly traded companies, using real-world financial documents like 10-K filings and earnings reports.**KG-RAG**: The Docugami KG-RAG dataset is a repository of documents and annotated question-answer pairs designed to evaluate retrieval-augmented generation (RAG) systems, featuring realistic long-form business documents and varying question complexities across single and multiple documents.**RAGBattlePacket**: A collection of tax consulting PDF reports from Deloitte. ### Evaluation methodology We established a comprehensive evaluation framework to systematically compare chunking strategies across different datasets and measure their impact on RAG system performance. **Primary metric**: End-to-end RAG answer accuracy**Evaluation process**: Multiple trials per configuration with many judge models ### Evaluation metrics For our evaluation",
    "token_count": 512,
    "embedding": null,
    "file_type": "text/html",
    "source_url": "s3://e2e-rag-system-42/data/raw/htmls/best_chunking_stratergy.html",
    "page_number": null,
    "slide_range": null,
    "row_range": null,
    "token_range": [
      461,
      973
    ],
    "audio_range": null,
    "timestamp": "2025-09-23T15:08:44Z",
    "parser_version": "trafilatura-only-v2",
    "tags": [],
    "layout_tags": [
      "page"
    ],
    "used_ocr": false,
    "heading_path": [],
    "headings": [
      "Finding the Best Chunking Strategy for Accurate AI Responses | NVIDIA Technical Blog"
    ],
    "line_range": null
  }
,
  {
    "document_id": "2e699fa601025fb786fe7d6bb464ee62",
    "file_name": "best_chunking_stratergy.html",
    "chunk_id": "2e699fa601025fb786fe7d6bb464ee62_3",
    "chunk_type": "token_window",
    "text": "comprehensive evaluation framework to systematically compare chunking strategies across different datasets and measure their impact on RAG system performance. **Primary metric**: End-to-end RAG answer accuracy**Evaluation process**: Multiple trials per configuration with many judge models ### Evaluation metrics For our evaluation, we used the NV Answer Accuracy metric from the RAGAS evaluation framework, which measures the agreement between a model’s response and a reference ground truth for a given question. The Answer Accuracy metric works by: - Using LLM-as-a-judge to evaluate the correctness of generated responses. - Comparing the model’s outputs against ground-truth references. - Scoring on a scale of 0-4, where: **0**: The response is inaccurate or doesn’t address the question.**2**: The response partially aligns with the reference.**4**: The response exactly aligns with the reference. To ensure robustness, each evaluation involves multiple judgment runs with different judge models, and the scores are averaged to produce the final accuracy metric. For our experiments, we used the following powerful models as judges: **Mixtral 8x22B Instruct**(mistralai/mixtral-8x22b-instruct-v0.1)**Llama 3.1 70B Instruct**(meta/llama-3.1-70b-instruct) Using these large language models as judges provided high-quality assessments, while the multi-judge approach (a.k.a. “council of judges”) helped minimize bias from any single evaluator model, resulting in more reliable performance measurements across different chunking strategies. **Ingestion framework** For our experiments, we used two different document ingestion frameworks to ensure fair comparisons between different chunking strategies: **NVIDIA NeMo Retriever**: Used for extracting content for page-level and token-based chunking strategies. This set of microservices is designed for parsing complex, unstructured PDFs and other enterprise documents, enabling us to:- Extract high-quality text while preserving document structure. - Capture tables and charts from financial reports and technical documents. - Process hundreds of documents efficiently across our diverse datasets. **nemoretriever-parse**: Model used specifically for section-level chunking, as it can intelligently detect section headers and document structure. For a fair comparison between page-level and section-level chunking, we also used nemoretriever-parse extraction for a version of page-level chunking tests. This dual-framework approach enabled us to leverage the strengths of each tool while ensuring that our chunking strategy comparisons reflected true",
    "token_count": 512,
    "embedding": null,
    "file_type": "text/html",
    "source_url": "s3://e2e-rag-system-42/data/raw/htmls/best_chunking_stratergy.html",
    "page_number": null,
    "slide_range": null,
    "row_range": null,
    "token_range": [
      922,
      1434
    ],
    "audio_range": null,
    "timestamp": "2025-09-23T15:08:44Z",
    "parser_version": "trafilatura-only-v2",
    "tags": [],
    "layout_tags": [
      "page"
    ],
    "used_ocr": false,
    "heading_path": [],
    "headings": [
      "Finding the Best Chunking Strategy for Accurate AI Responses | NVIDIA Technical Blog"
    ],
    "line_range": null
  }
,
  {
    "document_id": "2e699fa601025fb786fe7d6bb464ee62",
    "file_name": "best_chunking_stratergy.html",
    "chunk_id": "2e699fa601025fb786fe7d6bb464ee62_4",
    "chunk_type": "token_window",
    "text": "between page-level and section-level chunking, we also used nemoretriever-parse extraction for a version of page-level chunking tests. This dual-framework approach enabled us to leverage the strengths of each tool while ensuring that our chunking strategy comparisons reflected true performance differences rather than extraction artifacts. When comparing page-level versus section-level chunking, we used the same nemoretriever-parse extraction to eliminate any extraction-based variances, providing a more controlled comparison. It’s important to note that while our chunking strategies (page-level, section-level, and token-based) were applied to the text content of documents, tables, and charts were extracted as separate entities. These elements were not split or chunked, but rather preserved as complete units to maintain their integrity and context. This approach ensures that complex information remains intact during the retrieval process, allowing the RAG system to access complete tables and charts when needed. ### RAG system implementation For our experiments, we used components from the NVIDIA RAG Blueprint, which provides a comprehensive reference implementation for enterprise-grade RAG pipelines. This blueprint offers: - A modular microservices architecture that enables easy component swapping and evaluation. - Support for multimodal data processing (documents with text, images, charts, and tables). - Integration with advanced NeMo Retriever microservices for embedding, reranking, and LLM inference - Extensive configurability for experimentation with different hyperparameters. The NVIDIA RAG Blueprint is particularly well-suited for chunking experiments as it provides: - Multiple pre-built chunking strategies. - Vector database integration for efficient storage and retrieval. - Robust evaluation capabilities to measure performance differences. If you’re conducting chunking experiments or building a production RAG system, this blueprint can serve as an excellent starting point, reducing development time while providing the flexibility needed for customization. To ensure a fair and robust evaluation across chunking strategies, we standardized the following components in our RAG pipeline: **Embedding model**: nvidia/llama-3.2-nv-embedqa-1b-v2**Reranking model**: nvidia/llama-3.2-nv-rerankqa-1b-v2**Retrieval top-k**: 10 (number of retrieved contexts for generation)**Generator model**: nvidia/llama-3.1-nemotron-70b-instruct By keeping these components consistent across all experiments, we ensured that performance differences could be attributed to the chunking strategies rather than variations in other parts of the RAG pipeline. These state",
    "token_count": 512,
    "embedding": null,
    "file_type": "text/html",
    "source_url": "s3://e2e-rag-system-42/data/raw/htmls/best_chunking_stratergy.html",
    "page_number": null,
    "slide_range": null,
    "row_range": null,
    "token_range": [
      1383,
      1895
    ],
    "audio_range": null,
    "timestamp": "2025-09-23T15:08:44Z",
    "parser_version": "trafilatura-only-v2",
    "tags": [],
    "layout_tags": [
      "page"
    ],
    "used_ocr": false,
    "heading_path": [],
    "headings": [
      "Finding the Best Chunking Strategy for Accurate AI Responses | NVIDIA Technical Blog"
    ],
    "line_range": null
  }
,
  {
    "document_id": "2e699fa601025fb786fe7d6bb464ee62",
    "file_name": "best_chunking_stratergy.html",
    "chunk_id": "2e699fa601025fb786fe7d6bb464ee62_5",
    "chunk_type": "token_window",
    "text": "/llama-3.1-nemotron-70b-instruct By keeping these components consistent across all experiments, we ensured that performance differences could be attributed to the chunking strategies rather than variations in other parts of the RAG pipeline. These state-of-the-art models from NVIDIA provide the foundation for our retrieval and generation capabilities, helping us isolate the impact of different chunking strategies on overall RAG performance. ## Results and analysis Our experiments yielded several interesting patterns across datasets. ### Overall performance by chunking strategy This chart shows the average end-to-end RAG accuracy across all datasets for each chunking strategy, with error bars representing standard deviations. Notably, page-level chunking achieved the highest average accuracy (0.648) with the lowest standard deviation (0.107), indicating more consistent performance across datasets. Meanwhile, all token-based approaches maintained consistent performance between 0.603 and 0.645. When directly comparing page-level chunking with section-level chunking using the same nemoretriever-parse extraction, we find that page-level chunking outperforms section-level chunking on average across our test datasets. This reinforces our finding that page-level chunking is generally the most effective strategy. **Dataset-specific performance** This chart breaks down RAG accuracy by dataset and chunking strategy, revealing how different content types respond to various chunking approaches. Some datasets, such as FinanceBench and RAGBattlePacket, show optimal performance with medium-sized chunks (512-1024 tokens), while performance drops with large chunks (2,048 tokens). Other datasets, such as KG-RAG, show more variability across chunking strategies, with no clear linear relationship between chunk size and performance. Looking at the dataset-specific comparison between page and section chunking strategies, we can see that page-level chunking outperforms section-level chunking in most cases, with only FinanceBench showing slightly better performance with section-level chunking. This indicates that while document structure matters, natural page boundaries typically provide more coherent and effective chunks for retrieval. **Key observations** **Page-level chunking is the overall winner**: Our experiments clearly show that page-level chunking achieved the highest average accuracy (0.648) across all datasets and the lowest standard deviation (0.107), showing more consistent performance across different content types. Page-level chunking demonstrated superior overall performance when compared to both token-based chunking and section-level chunking. Looking at the dataset-specific findings, we can see clear evidence of this pattern. Some financial datasets, such as KG-R",
    "token_count": 512,
    "embedding": null,
    "file_type": "text/html",
    "source_url": "s3://e2e-rag-system-42/data/raw/htmls/best_chunking_stratergy.html",
    "page_number": null,
    "slide_range": null,
    "row_range": null,
    "token_range": [
      1844,
      2356
    ],
    "audio_range": null,
    "timestamp": "2025-09-23T15:08:44Z",
    "parser_version": "trafilatura-only-v2",
    "tags": [],
    "layout_tags": [
      "page"
    ],
    "used_ocr": false,
    "heading_path": [],
    "headings": [
      "Finding the Best Chunking Strategy for Accurate AI Responses | NVIDIA Technical Blog"
    ],
    "line_range": null
  }
,
  {
    "document_id": "2e699fa601025fb786fe7d6bb464ee62",
    "file_name": "best_chunking_stratergy.html",
    "chunk_id": "2e699fa601025fb786fe7d6bb464ee62_6",
    "chunk_type": "token_window",
    "text": "across different content types. Page-level chunking demonstrated superior overall performance when compared to both token-based chunking and section-level chunking. Looking at the dataset-specific findings, we can see clear evidence of this pattern. Some financial datasets, such as KG-RAG, achieved best performance with page-level chunking (0.520), while others, such as FinanceBench, performed best with 1,024-token chunks (0.579) but still showed strong results with page-level chunking (0.566). The RAGBattlePacket also showed excellent performance with page-level chunking (0.790), very close to its best result with 1,024-token chunks (0.804).**Inconsistent patterns even within similar document types**: Even within the same document category, optimal chunking strategies varied significantly. This observation is particularly evident in financial documents, where we observed three different optimal strategies across three datasets: FinanceBench performed best with 1,024-token chunks (0.579), Earnings with 512-token chunks (0.681), and KG-RAG with page-level chunking (0.520). These variations suggest that, beyond broad content categories, specific document structures, information density, and the nature of queries significantly influence the optimal chunking strategy. This highlights the importance of testing multiple chunking approaches, even when working with similar document types.**Extreme chunk sizes show diminishing returns**: Very small (128 tokens) and very large (2,048 tokens) chunks generally underperformed medium-sized chunks. Across most datasets, the extreme ends of chunk sizes showed lower performance. For KG-RAG, 128-token chunks had the worst performance (0.421), significantly lower than other strategies. Similarly, 2048-token chunks underperformed 1024-token chunks for RAGBattlePacket (0.749 vs 0.804) and FinanceBench (0.506 vs 0.579). This suggests a “sweet spot” in the middle chunk size range for most document types.**Performance curves aren’t always linear**: For some datasets, performance didn’t increase or decrease linearly with chunk size. Earnings showed a non-linear pattern where performance peaked at 512 tokens (0.681), declined slightly at 1,024 tokens (0.663), and then declined further at 2,048 tokens (0.651). This contrasts with RAGBattlePacket, which showed a more linear improvement from 128 tokens (0.749) to 1,024 tokens (0.",
    "token_count": 512,
    "embedding": null,
    "file_type": "text/html",
    "source_url": "s3://e2e-rag-system-42/data/raw/htmls/best_chunking_stratergy.html",
    "page_number": null,
    "slide_range": null,
    "row_range": null,
    "token_range": [
      2305,
      2817
    ],
    "audio_range": null,
    "timestamp": "2025-09-23T15:08:44Z",
    "parser_version": "trafilatura-only-v2",
    "tags": [],
    "layout_tags": [
      "page"
    ],
    "used_ocr": false,
    "heading_path": [],
    "headings": [
      "Finding the Best Chunking Strategy for Accurate AI Responses | NVIDIA Technical Blog"
    ],
    "line_range": null
  }
,
  {
    "document_id": "2e699fa601025fb786fe7d6bb464ee62",
    "file_name": "best_chunking_stratergy.html",
    "chunk_id": "2e699fa601025fb786fe7d6bb464ee62_7",
    "chunk_type": "token_window",
    "text": "0.663), and then declined further at 2,048 tokens (0.651). This contrasts with RAGBattlePacket, which showed a more linear improvement from 128 tokens (0.749) to 1,024 tokens (0.804) before declining at 2,048 tokens (0.749). These different curves highlight the complex relationship between chunk size and retrieval effectiveness.**Query characteristics influence optimal chunk size**: The nature of queries in each dataset correlates with the most effective chunking strategies. DigitalCorpora767 and Earnings datasets, which primarily contain factoid queries seeking specific information, performed well with smaller to medium-sized chunks (256-512 tokens). These datasets showed consistent performance across smaller chunk sizes, with DigitalCorpora767 maintaining relatively stable accuracy from 256 to 1,024 tokens, and Earnings achieving peak performance at 512 tokens (0.681). In contrast, FinanceBench, KG-RAG, and RAGBattlePacket datasets, which feature more complex analytical queries requiring broader context and deeper reasoning, generally benefited from larger chunk sizes (1,024 tokens) or page-level chunking. **Guidelines for choosing your chunking strategy** Based on our findings, here are practical recommendations for selecting a chunking strategy: ### 1. Consider page-level chunking first Our experiments clearly show that page-level chunking provides the most consistent performance across diverse document types. We recommend: **Start with page-level chunking**as your default strategy (using NeMo Retriever extraction)- While not always the absolute best for every dataset, it offers the highest average accuracy and most consistent performance - Page-level chunking provides easier citation and reference capabilities since pages are static boundaries, unlike token-based chunking, where chunk indices depend on the chosen chunk size, making references less stable across different configurations ### 2. Consider your content type for refinement If you want to experiment beyond page-level chunking: **Financial documents**: Try 512 or 1,024-token chunks (using NeMo Retriever extraction) if your documents resemble FinanceBench. Section-level chunking can also be effective for financial documents, sometimes outperforming page-level chunking**Diverse documents**: Smaller token-sized chunks (256-512 tokens) performed well for varied content collections ### 3. Query characteristics impact performance **Factoid queries**(seeking specific facts): page-level chunking or smaller chunks (256-512 tokens, using NeMo Retriever extraction)**Complex analytical queries**: Page-level chunking or large",
    "token_count": 512,
    "embedding": null,
    "file_type": "text/html",
    "source_url": "s3://e2e-rag-system-42/data/raw/htmls/best_chunking_stratergy.html",
    "page_number": null,
    "slide_range": null,
    "row_range": null,
    "token_range": [
      2766,
      3278
    ],
    "audio_range": null,
    "timestamp": "2025-09-23T15:08:44Z",
    "parser_version": "trafilatura-only-v2",
    "tags": [],
    "layout_tags": [
      "page"
    ],
    "used_ocr": false,
    "heading_path": [],
    "headings": [
      "Finding the Best Chunking Strategy for Accurate AI Responses | NVIDIA Technical Blog"
    ],
    "line_range": null
  }
,
  {
    "document_id": "2e699fa601025fb786fe7d6bb464ee62",
    "file_name": "best_chunking_stratergy.html",
    "chunk_id": "2e699fa601025fb786fe7d6bb464ee62_8",
    "chunk_type": "token_window",
    "text": "content collections ### 3. Query characteristics impact performance **Factoid queries**(seeking specific facts): page-level chunking or smaller chunks (256-512 tokens, using NeMo Retriever extraction)**Complex analytical queries**: Page-level chunking or large chunks (1024 tokens, using NeMo Retriever extraction) We recommend evaluating these strategies on your own data to confirm they work well for your specific use case. Different query patterns and content structures may require different approaches, so testing with your actual data is crucial for optimal performance. ### 4. Test multiple approaches While page-level chunking is our recommended starting point, we still recommend experimenting with multiple chunking strategies for your specific use case: - Start with page-level chunking as your baseline. - Select 1-2 additional chunking strategies based on your content type. - Run a small-scale evaluation on your dataset. - Analyze both quantitative metrics and qualitative response quality. - Iterate and refine based on results. ## Conclusion Our comprehensive evaluation across diverse datasets demonstrates that page-level chunking is the most effective chunking strategy for RAG systems, offering the highest average accuracy and most consistent performance. This is true when compared against both token-based chunking and section-level chunking approaches. While specific content types may occasionally benefit from alternative strategies, page-level chunking provides an excellent default choice that balances performance across document types, query styles, and retrieval scenarios. This suggests that natural page boundaries often encapsulate coherent information units that are well-suited for retrieval tasks. The optimal chunking strategy for your specific RAG system may still vary depending on your unique use case, content type, and query patterns. By starting with page-level chunking and systematically evaluating alternatives using the guidelines provided in this post, you can optimize your RAG system’s performance and deliver more accurate, relevant responses to your users. Remember that chunking is just one of many hyperparameters in a RAG system. For truly optimal performance, consider exploring other dimensions such as embedding models, reranking strategies, and generation parameters. **Get started with the NVIDIA RAG Blueprint** We encourage you to try the NVIDIA RAG Blueprint for yourself. This enterprise-grade reference implementation provides all the components you need to: - Experiment with different chunking strategies on your own datasets - Leverage state-of-the-art embedding and reranking models - Build a production-ready RAG system with minimal development time",
    "token_count": 483,
    "embedding": null,
    "file_type": "text/html",
    "source_url": "s3://e2e-rag-system-42/data/raw/htmls/best_chunking_stratergy.html",
    "page_number": null,
    "slide_range": null,
    "row_range": null,
    "token_range": [
      3227,
      3710
    ],
    "audio_range": null,
    "timestamp": "2025-09-23T15:08:44Z",
    "parser_version": "trafilatura-only-v2",
    "tags": [],
    "layout_tags": [
      "page"
    ],
    "used_ocr": false,
    "heading_path": [],
    "headings": [
      "Finding the Best Chunking Strategy for Accurate AI Responses | NVIDIA Technical Blog"
    ],
    "line_range": null
  }
]
