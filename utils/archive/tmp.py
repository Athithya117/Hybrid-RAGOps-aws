import spacy

nlp = spacy.load("/workspace/models/spacy/en_core_web_lg/en_core_web_lg-3.8.0")
doc = nlp("SyncGE (graph expansion) consistently improves base retrievers (BM25, ColBERT) across datasets; SyncGE plus hybrid techniques produce substantial recall gains over previous iterative graph approaches.\n\nEfficiency (tokens and iterations):\n\n* GeAR achieves strong single-iteration performance in many cases (notably MuSiQue), whereas IRCoT-style pipelines often require multiple iterations.\n* The authors report that GeAR and SyncGE variants use far fewer LLM tokens than some iterative baselines, with aggregated token graphs showing substantial savings.\n\nFor full numeric tables, charts, and plots see the original paper.\n\n---\n\n7. ABLATIONS & ANALYSIS (authors' findings)\n\n---\n\n* Naive graph expansion versus SyncGE: both help retrieval, but SyncGE (LLM-seeded starting nodes) outperforms naive graph expansion—particularly on MuSiQue—showing the benefit of using the LLM to find better seeds for graph traversal.\n\n* Diversity in beam search improves recall: experiments report higher retrieval scores when diversity penalties or heuristics are applied during triple-path exploration.\n\n* Gist memory compactness: gist triple memory yields both performance and efficiency benefits, allowing the agent to summarise essential multi-hop evidence without repeating unnecessary verbose context.\n\n* Robustness across triple densities: SyncGE and GeAR maintain consistent performance across passages with different triple densities (i.e., both sparse and dense triple extraction conditions).\n\n---\n\n8. EFFICIENCY (detailed notes)\n\n---\n\nMain efficiency claims:\n\n* GeAR requires fewer iterations to reach high recall compared to iterative baselines. On MuSiQue, GeAR often achieves high retrieval quality in a single iteration.\n* Token usage: across repeated iterations, GeAR accumulates far fewer LLM input/output tokens than some iterative baselines in the reported experiments.\n\nPractical implication:")
print([(ent.text, ent.label_) for ent in doc.ents])
