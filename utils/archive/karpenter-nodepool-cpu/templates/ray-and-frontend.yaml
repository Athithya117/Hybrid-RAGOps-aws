{{- $rayEnabled := .Values.ray.enabled }}
{{- $hasRayV1 := .Capabilities.APIVersions.Has "ray.io/v1" }}
{{- $hasRayV1alpha1 := .Capabilities.APIVersions.Has "ray.io/v1alpha1" }}
{{- if and $rayEnabled (or $hasRayV1 $hasRayV1alpha1) }}
{{- if $hasRayV1 }}
apiVersion: ray.io/v1
{{- else }}
apiVersion: ray.io/v1alpha1
{{- end }}
kind: RayService
metadata:
  name: {{ .Release.Name }}-ray
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io:name: onnx-embedder-reranker
spec:
  rayClusterConfig:
    rayVersion: "{{ .Values.rayVersion }}"
    headGroupSpec:
      headService:
        metadata:
          name: {{ .Values.headServiceName | quote }}
      serviceType: ClusterIP
      rayStartParams:
        dashboard-host: "0.0.0.0"
        ray-client-server-port: "{{ .Values.rayClientPort }}"
      template:
        metadata:
          labels:
            app.kubernetes.io/instance: {{ .Release.Name }}
            ray.io/serve: "true"
            ray-node-type: head
        spec:
          serviceAccountName: {{ .Values.serviceAccount.name | default (printf "%s-sa" .Release.Name) }}
          securityContext:
            runAsUser: {{ .Values.podSecurityContext.runAsUser }}
            fsGroup: {{ .Values.podSecurityContext.fsGroup }}
          nodeSelector:
{{ toYaml (.Values.nodeSelector | default .Values.global.nodeSelector) | indent 12 }}
          tolerations: {{ toYaml (.Values.tolerations | default .Values.global.tolerations) | indent 10 }}
          affinity: {{ toYaml .Values.affinity | indent 10 }}
          initContainers:
            - name: prometheus-multiproc-clean
              image: busybox
              command: ["sh","-c","rm -rf /tmp/prometheus_multiproc/* || true && chmod 0777 /tmp/prometheus_multiproc || true"]
              volumeMounts:
                - name: prometheus-multiproc
                  mountPath: /tmp/prometheus_multiproc
            - name: init-model-check
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
              command:
                - sh
                - -c
                - |
                  TIMEOUT={{ .Values.modelCheck.timeoutSeconds }}
                  INTERVAL={{ .Values.modelCheck.intervalSeconds }}
                  DEADLINE=$((SECONDS+TIMEOUT))
                  echo "waiting up to ${TIMEOUT}s for model files"
                  while [ $SECONDS -lt $DEADLINE ]; do
                    if [ -f {{ .Values.env.EMBEDDER_ONNX_PATH | quote }} ] && [ -f {{ .Values.env.EMBEDDER_TOKENIZER_PATH | quote }} ] && [ -f {{ .Values.env.RERANKER_ONNX_PATH | quote }} ]; then
                      echo "model files present"
                      exit 0
                    fi
                    sleep $INTERVAL
                  done
                  echo "required model files missing after ${TIMEOUT}s" 1>&2
                  echo "attempting model download fallback"
                  if [ -f /app/download_hf.py ]; then python3 /app/download_hf.py || true; fi
                  if [ -f {{ .Values.env.EMBEDDER_ONNX_PATH | quote }} ] && [ -f {{ .Values.env.EMBEDDER_TOKENIZER_PATH | quote }} ] && [ -f {{ .Values.env.RERANKER_ONNX_PATH | quote }} ]; then
                    echo "model download succeeded"
                    exit 0
                  fi
                  exit 1
              volumeMounts:
                - name: models
                  mountPath: /workspace/models
                - name: prometheus-multiproc
                  mountPath: /tmp/prometheus_multiproc
          containers:
            - name: ray-embedder-reranker-head
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command: ["/bin/bash","-lc","--"]
              args: ["ulimit -n 65536; $KUBERAY_GEN_RAY_START_CMD; exec python /app/rayserve_entrypoint.py"]
              env:
{{- range $k, $v := .Values.env }}
                - name: {{ $k }}
                  value: "{{ $v }}"
{{- end }}
                - name: PROMETHEUS_MULTIPROC_DIR
                  value: "/tmp/prometheus_multiproc"
                - name: RAY_ADDRESS
                  value: "local"
                - name: HTTP_PORT
                  value: "{{ .Values.service.httpPort }}"
                - name: GRPC_PORT
                  value: "{{ .Values.service.grpcPort }}"
                - name: OTEL_EXPORTER_OTLP_ENDPOINT
                  value: "http://{{ .Release.Name }}-otel-collector.{{ .Values.namespace }}.svc.cluster.local:4317"
                - name: OTEL_SERVICE_NAME
                  value: "{{ .Release.Name }}-onnx"
              ports:
                - name: gcs-server
                  containerPort: 6379
                - name: dashboard
                  containerPort: 8265
                - name: http
                  containerPort: {{ .Values.service.httpPort }}
                - name: grpc
                  containerPort: {{ .Values.service.grpcPort }}
                - name: metrics
                  containerPort: {{ .Values.service.metricsPort }}
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: {{ .Values.service.httpPort }}
                initialDelaySeconds: 30
                periodSeconds: 10
                failureThreshold: 3
              readinessProbe:
                httpGet:
                  path: /healthz
                  port: {{ .Values.service.httpPort }}
                initialDelaySeconds: 10
                periodSeconds: 5
                failureThreshold: 3
              startupProbe:
                httpGet:
                  path: /healthz
                  port: {{ .Values.service.httpPort }}
                initialDelaySeconds: 60
                periodSeconds: 5
                failureThreshold: 60
              volumeMounts:
                - name: models
                  mountPath: /workspace/models
                  readOnly: {{ .Values.models.hostPath.readOnly | default true }}
                - name: prometheus-multiproc
                  mountPath: /tmp/prometheus_multiproc
              resources:
{{ toYaml .Values.head.resources | indent 16 }}
          volumes:
            - name: models
              {{- if .Values.models.hostPath.enabled }}
              hostPath:
                path: {{ .Values.models.hostPath.path | quote }}
                type: Directory
              {{- else if and .Values.pvc.existingClaim (ne .Values.pvc.existingClaim "") }}
              persistentVolumeClaim:
                claimName: {{ .Values.pvc.existingClaim | quote }}
              {{- else if .Values.pvc.create }}
              persistentVolumeClaim:
                claimName: {{ .Values.pvc.name | quote }}
              {{- else }}
              emptyDir: {}
              {{- end }}
            - name: prometheus-multiproc
              emptyDir: {}
    workerGroupSpecs:
      - groupName: {{ .Values.worker.groupName }}
        minReplicas: {{ .Values.worker.minReplicas }}
        maxReplicas: {{ .Values.worker.maxReplicas }}
        replicas: {{ .Values.worker.minReplicas }}
        rayStartParams:
          block: "true"
        template:
          metadata:
            labels:
              app.kubernetes.io/instance: {{ .Release.Name }}
              ray.io/serve: "true"
              ray-node-type: worker
          spec:
            serviceAccountName: {{ .Values.serviceAccount.name | default (printf "%s-sa" .Release.Name) }}
            securityContext:
              runAsUser: {{ .Values.podSecurityContext.runAsUser }}
              fsGroup: {{ .Values.podSecurityContext.fsGroup }}
            nodeSelector:
{{ toYaml (.Values.nodeSelector | default .Values.global.nodeSelector) | indent 14 }}
            tolerations: {{ toYaml (.Values.tolerations | default .Values.global.tolerations) | indent 12 }}
            affinity: {{ toYaml .Values.affinity | indent 12 }}
            initContainers:
              - name: prometheus-multiproc-clean
                image: busybox
                command: ["sh","-c","rm -rf /tmp/prometheus_multiproc/* || true && chmod 0777 /tmp/prometheus_multiproc || true"]
                volumeMounts:
                  - name: prometheus-multiproc
                    mountPath: /tmp/prometheus_multiproc
              - name: init-model-check
                image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
                command:
                  - sh
                  - -c
                  - |
                    TIMEOUT={{ .Values.modelCheck.timeoutSeconds }}
                    INTERVAL={{ .Values.modelCheck.intervalSeconds }}
                    DEADLINE=$((SECONDS+TIMEOUT))
                    echo "waiting up to ${TIMEOUT}s for model files"
                    while [ $SECONDS -lt $DEADLINE ]; do
                      if [ -f {{ .Values.env.EMBEDDER_ONNX_PATH | quote }} ] && [ -f {{ .Values.env.EMBEDDER_TOKENIZER_PATH | quote }} ] && [ -f {{ .Values.env.RERANKER_ONNX_PATH | quote }} ]; then
                        echo "model files present"
                        exit 0
                      fi
                      sleep $INTERVAL
                    done
                    echo "required model files missing after ${TIMEOUT}s" 1>&2
                    echo "attempting model download fallback"
                    if [ -f /app/download_hf.py ]; then python3 /app/download_hf.py || true; fi
                    if [ -f {{ .Values.env.EMBEDDER_ONNX_PATH | quote }} ] && [ -f {{ .Values.env.EMBEDDER_TOKENIZER_PATH | quote }} ] && [ -f {{ .Values.env.RERANKER_ONNX_PATH | quote }} ]; then
                      echo "model download succeeded"
                      exit 0
                    fi
                    exit 1
                volumeMounts:
                  - name: models
                    mountPath: /workspace/models
                  - name: prometheus-multiproc
                    mountPath: /tmp/prometheus_multiproc
            containers:
              - name: ray-worker
                image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
                imagePullPolicy: {{ .Values.image.pullPolicy }}
                env:
{{- range $k, $v := .Values.env }}
                  - name: {{ $k }}
                    value: "{{ $v }}"
{{- end }}
                  - name: PROMETHEUS_MULTIPROC_DIR
                    value: "/tmp/prometheus_multiproc"
                  - name: RAY_ADDRESS
                    value: "ray://{{ .Values.headServiceName }}.{{ .Values.namespace }}.svc.cluster.local:{{ .Values.rayClientPort }}"
                  - name: HTTP_PORT
                    value: "{{ .Values.service.httpPort }}"
                  - name: GRPC_PORT
                    value: "{{ .Values.service.grpcPort }}"
                  - name: OTEL_EXPORTER_OTLP_ENDPOINT
                    value: "http://{{ .Release.Name }}-otel-collector.{{ .Values.namespace }}.svc.cluster.local:4317"
                  - name: OTEL_SERVICE_NAME
                    value: "{{ .Release.Name }}-onnx"
                ports:
                  - name: http
                    containerPort: {{ .Values.service.httpPort }}
                  - name: grpc
                    containerPort: {{ .Values.service.grpcPort }}
                  - name: metrics
                    containerPort: {{ .Values.service.metricsPort }}
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: {{ .Values.service.httpPort }}
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  failureThreshold: 3
                readinessProbe:
                  httpGet:
                    path: /healthz
                    port: {{ .Values.service.httpPort }}
                  initialDelaySeconds: 10
                  periodSeconds: 5
                  failureThreshold: 3
                startupProbe:
                  httpGet:
                    path: /healthz
                    port: {{ .Values.service.httpPort }}
                  initialDelaySeconds: 60
                  periodSeconds: 5
                  failureThreshold: 60
                volumeMounts:
                  - name: models
                    mountPath: /workspace/models
                    readOnly: {{ .Values.models.hostPath.readOnly | default true }}
                  - name: prometheus-multiproc
                    mountPath: /tmp/prometheus_multiproc
                resources:
{{ toYaml .Values.worker.resources | indent 18 }}
            volumes:
              - name: models
                {{- if .Values.models.hostPath.enabled }}
                hostPath:
                  path: {{ .Values.models.hostPath.path | quote }}
                  type: Directory
                {{- else if and .Values.pvc.existingClaim (ne .Values.pvc.existingClaim "") }}
                persistentVolumeClaim:
                  claimName: {{ .Values.pvc.existingClaim | quote }}
                {{- else if .Values.pvc.create }}
                persistentVolumeClaim:
                  claimName: {{ .Values.pvc.name | quote }}
                {{- else }}
                emptyDir: {}
                {{- end }}
              - name: prometheus-multiproc
                emptyDir: {}
      - groupName: frontend
        minReplicas: {{ .Values.frontend.replicas | default 1 }}
        maxReplicas: {{ .Values.frontend.replicas | default 1 }}
        replicas: {{ .Values.frontend.replicas | default 1 }}
        rayStartParams:
          block: "true"
        template:
          metadata:
            labels:
              app.kubernetes.io/instance: {{ .Release.Name }}
              app: {{ printf "%s-frontend" .Release.Name }}
              ray.io/serve: "true"
              ray-node-type: frontend
          spec:
            serviceAccountName: {{ .Values.serviceAccount.name | default (printf "%s-sa" .Release.Name) }}
            securityContext:
              runAsUser: {{ .Values.podSecurityContext.runAsUser }}
              fsGroup: {{ .Values.podSecurityContext.fsGroup }}
            nodeSelector:
{{ toYaml (.Values.nodeSelector | default .Values.global.nodeSelector) | indent 14 }}
            tolerations: {{ toYaml (.Values.tolerations | default .Values.global.tolerations) | indent 12 }}
            affinity: {{ toYaml .Values.affinity | indent 12 }}
            containers:
              - name: frontend
                image: "{{ .Values.frontend.image.repository }}:{{ .Values.frontend.image.tag }}"
                imagePullPolicy: {{ .Values.frontend.image.pullPolicy }}
                ports:
                  - name: http
                    containerPort: 3000
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 3000
                  initialDelaySeconds: 10
                  periodSeconds: 15
                  failureThreshold: 3
                readinessProbe:
                  httpGet:
                    path: /healthz
                    port: 3000
                  initialDelaySeconds: 5
                  periodSeconds: 5
                  failureThreshold: 3
                resources:
                  requests:
                    cpu: "50m"
                    memory: "128Mi"
                  limits:
                    cpu: "500m"
                    memory: "512Mi"
            volumes:
              - name: prometheus-multiproc
                emptyDir: {}
{{- end }}
